#%SED_GAWK_PATH%

# ------------------------------------------------------------
# cawk is subjet to a MIT open-source licence
# please refer to the MIT licence file for further information
#
# for %SED_VAR% change like SED_GAWK_PATH, etc. please refer to
# file support/tests.sed for further information
#
# this test generate a cawk report
# ------------------------------------------------------------

@include %SED_INCLUDE_PATH%

BEGIN {
}

BEGINFILE {
	pass = 0;
	error = 0;
	high = 0;
	pass_high = 0;
	medium = 0;
	pass_medium = 0;
	low = 0;
	pass_low = 0;
	pass_info = 0;
	error_info = 0;
	delete files;
	delete tests;
}

/;error$/ {
	split($0,tmp,";");
	files[tmp[1]];
	tests[tmp[2]] = tmp[2];
	error += 1;
}

/;pass$/ {
	split($0,tmp,";");
	files[tmp[1]];
	tests[tmp[2]] = tmp[2];
	pass += 1;
}

/;info;/ && /;pass$/ {
	pass_info += 1
}

/;info;/ && /;error$/ {
	error_info += 1
}

/;high;/ && /;error$/ {
	high += 1;
}

/;high;/ && /;pass$/ {
	pass_high += 1;
}

/;medium;/ && /;error$/ {
	medium += 1;
}

/;medium;/ && /;pass$/ {
	pass_medium += 1;
}

/;low;/ && /;error$/ {
	low += 1;
}

/;low;/ && /;pass$/ {
	pass_low += 1;
}

/;info;/ {
	info += 1;
}

ENDFILE {
	print "number_of_checks " length(files) * length(tests);
	print "number_of_files " length(files); 
	print "number_of_tests " length(tests);
	asort(tests); 
	delete tests_tri;
    	n = asorti(tests, tests_tri, "@val_num_asc")
    	for (i = 1; i <= n; i++) {
        	print "\ttest "tests[tests_tri[i]];
    	}
	if ( ( pass + error ) > 0) {
		decimal = sprintf("%.1f", 100 * pass / ( pass + error))
		print "number_of_pass " pass " (" decimal "%)";
	} else {
		print "number_of_pass " pass;
	}
	if ( pass > 0 ) {
		decimal = sprintf("%.1f", 100 * pass_high / pass )
		print "\tnumber_of_pass_high " pass_high " (" decimal "%)";
	} else {
		print "\tnumber_of_pass_high " pass_high;
	}
	if ( pass > 0 ) {
		decimal = sprintf("%.1f", 100 * pass_medium / pass )
		print "\tnumber_of_pass_medium " pass_medium " (" decimal "%)";
	} else {
		print "\tnumber_of_pass_medium " pass_medium;
	}
	if ( pass > 0 ) {
		decimal = sprintf("%.1f", 100 * pass_low / pass )
		print "\tnumber_of_pass_low " pass_low " (" decimal "%)";
	} else {
		print "\tnumber_of_pass_low " pass_low;
	}
	if ( pass > 0 ) {
		decimal = sprintf("%.1f", 100 * pass_info / pass )
		print "\tnumber_of_pass_info " pass_info " (" decimal "%)";
	} else {
		print "\tnumber_of_pass_info " pass_info;
	}
	if ( ( pass + error ) > 0) {
		decimal = sprintf("%.1f", 100 * error / ( pass + error))
		print "number_of_error " error " (" decimal "%)";
	} else {
		print "number_of_error " error;
	}
	if ( error > 0 ) {
		decimal = sprintf("%.1f", 100 * high / error )
		print "\tnumber_of_error_high " high " (" decimal "%)";
	} else {
		print "\tnumber_of_error_high " high;
	}
	if ( error > 0 ) {
		decimal = sprintf("%.1f", 100 * medium / error )
		print "\tnumber_of_error_medium " medium " (" decimal "%)";
	} else {
		print "\tnumber_of_error_medium " medium;
	}
	if ( error > 0 ) {
		decimal = sprintf("%.1f", 100 * low / error )
		print "\tnumber_of_error_low " low " (" decimal "%)";
	} else {
		print "\tnumber_of_error_low " low;
	}
	if ( error > 0 ) {
		decimal = sprintf("%.1f", 100 * error_info / error )
		print "\tnumber_of_error_info " error_info " (" decimal "%)";
	} else {
		print "\tnumber_of_error_info " error_info;
	}
}

END {
}
