#%SED_GAWK_PATH%

# ------------------------------------------------------------
# cawk is subjet to a MIT open-source licence
# please refer to the MIT licence file for further information
#
#
# for %SED_VAR% change like GAWK_PATH, etc. please refer to
# file support/tests.sed for further information
#
# purpose : check when an <routing> is def and not ref
# purpose : check an error when an <routing> is ref and not def
# author  : cedric llorens
# ------------------------------------------------------------

@include %SED_INCLUDE_PATH%

BEGIN {
}

BEGINFILE {
	pass = 1;
	delete routing_def;
	delete routing_ref;
}

# def ----

/^route-policy [^ ]+/ {
	routing_def[$2] = $0;
	next;
}

/^ip ip-prefix [^ ]+/ {
	routing_def[$3] = $0;
	next;
}

# ref ----

/^[ ]+.* route-policy .+/ {
	for(i=1;i<=NF;i++) {
		if ( $i == "route-policy" ) {
			routing_ref[$(i+1)] = $0;
			next;
		}
	}
	next;
}

/^.+ ip-prefix .+/ && !/^ip / {
	for(i=1;i<=NF;i++) {
		if ( $i == "ip-prefix" ) {
			routing_ref[$(i+1)] = $0;
			next;
		}
	}
	next;
}

ENDFILE {

	# routing def not ref ----
	for (id in routing_def) {
		if ( !(id in routing_ref) ) {
			print_err("routing_defref_set.huawei-vrf.gawk",id" : def not ref :"routing_def[id],0,"info","error");
			pass = 0;
		}
	}

	# routing ref not def ----
	for (id in routing_ref) {
		if ( !(id in routing_def) ) {
			print_err("routing_defref_set.huawei-vrf.gawk",id" : ref not def :"routing_ref[id],0,"high","error");
			pass = 0;
		}
	}

	if ( pass ) print_err("routing_defref_set.huawei-vrf.gawk","all routings defs are refs and the reverse",0,"high","pass");
}

END {
}
