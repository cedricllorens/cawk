#%SED_GAWK_PATH%

# ------------------------------------------------------------
# cawk is subjet to a MIT open-source licence
# please refer to the MIT licence file for further information
#
# for %SED_VAR% change like SED_GAWK_PATH, etc. please refer to 
# file support/tests.sed for further information
#
# purpose : checks when an routing is def and not ref
# purpose : checks an error when an routing is ref and not def
# ------------------------------------------------------------

@include %SED_INCLUDE_PATH%

BEGIN {
}

BEGINFILE {
	pass = 1;
	delete routing_def;
	delete routing_ref;
}

# def ----

/^route-map [^ ]+/ {
	routing_def[$2] = $0;
	next;
}

/^ip(v4|v6)? prefix-list [^ ]+/ {
	routing_def[$3] = $0;
	next;
}

# ref ----

/^.+ route-map .*/ && !/^route-map / {
	for(i=1;i<=NF;i++) {
		if ( $i == "route-map" ) {
			routing_ref[$(i+1)] = $0;
			break;
		}
	}
	next;
}

/^.+ prefix-list .*/ && !/^ip(v4|v6)? prefix-list/ {
	for(i=1;i<=NF;i++) {
		if ( $i == "prefix-list" ) {
			if ( $(i+1) != "ip" && $(i+1) != "ipv4" && $(i+1) != "ipv6" ) {
				routing_ref[$(i+1)] = $0;
			} else {
				routing_ref[$(i+2)] = $0;
			}
			break;
		}
	}
	next;
}

ENDFILE {

	# routing def and not ref
	for (id in routing_def) {
		if ( !(id in routing_ref) ) {
			print_err("routing_defref_set.cisco-ios.gawk",id" : def not ref :"routing_def[id],0,"low","error");
			pass = 0;
		}
	}

	# routing ref and not def
	for (id in routing_ref) {
		if ( !(id in routing_def) ) {
			print_err("routing_defref_set.cisco-ios.gawk",id" : ref not def :"routing_ref[id],0,"high","error");
			pass = 0;
		}
	}

	if ( pass ) print_err("routing_defref_set.cisco-ios.gawk","all routings defs are refs and the reverse",0,"high","pass");
}

END {
}
